<?php

/**
 * @file
 * The cwrc_dtoc_edition module.
 */

define('CWRC_DTOC_EDITION_ISLANDORA_CONTENT_MODEL', 'cwrc:dtocCModel');
define('CWRC_DTOC_EDITION_ISLANDORA_COLLECTION_PID', 'cwrc:dtocCollection');
define('CWRC_DTOC_EDITION_SESSION_KEY', 'cwrc_dtoc_edition_collections');

/**
 * Implements hook_menu().
 */
function cwrc_dtoc_edition_menu() {
  $items = array();

  // @todo reviews permissions access.
  $items['dtoc-edition/files-selector/%islandora_object/%ctools_js'] = array(
    'title' => 'Files selector',
    'title callback' => 'cwrc_dtoc_edition_ctools_modal_collection_files_selector_title',
    'title arguments' => array(2),
    'page callback' => 'cwrc_dtoc_edition_ctools_modal_collection_files_selector',
    'page arguments' => array(2, 3),
    // Using the same access arguments as islandora/basic_collection/find
    // collections_user allows users to search for collections.
    'access callback' => TRUE,
    // 'access arguments' => array(ISLANDORA_BASIC_COLLECTION_MIGRATE_COLLECTION_MEMBERS),
    'file' => 'includes/dtoc_reveal.endpoint.inc',
    'type' => MENU_CALLBACK,
  );

  $items['islandora/object/%islandora_object/manage/datastreams/%islandora_datastream/edit'] = array(
    'title' => 'Edit CWRC DToC Edition datastream',
    'title callback' => 'cwrc_dtoc_edition_datastream_edit_page_title',
    'title arguments' => array(2, 5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cwrc_dtoc_edition_reveal_form', 2, 5),
    'access callback' => 'islandora_datastream_access',
    'access arguments' => array(ISLANDORA_METADATA_EDIT, 5),
    'file' => 'includes/dtoc_reveal.form.inc',
    'type' => MENU_CALLBACK,
    'load arguments' => array(2),
  );

  $items['dtoc-edition/search-autocomplete'] = array(
    'title' => 'Dynamic Table of Context search autocomplete',
    'page callback' => 'cwrc_dtoc_edition_search_autocomplete',
    'type' => MENU_CALLBACK,
    'file' => 'includes/cwrc_dtoc_edition.search.inc',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function cwrc_dtoc_edition_theme($existing, $type, $theme, $path) {
  return array(
    'cwrc_dtoc_edition' => array(
      'variables' => array('islandora_object' => NULL),
      'pattern' => 'cwrc_dtoc_edition__',
      'template' => 'theme/cwrc-dtoc-edition',
      'file' => 'theme/cwrc_dtoc_edition.theme.inc',
    ),
  );
}

/**
 * Implements hook_islandora_required_objects().
 */
function cwrc_dtoc_edition_islandora_required_objects(IslandoraTuque $connection) {
  // Build a thumbnail datastream.
  $module_path = drupal_get_path('module', 'cwrc_dtoc_edition');
  $repository = $connection->repository;
  $root_pid = variable_get('islandora_repository_pid', 'islandora:root');

  // Collection object.
  $dtoc_collection = $repository->constructObject(CWRC_DTOC_EDITION_ISLANDORA_COLLECTION_PID);
  $dtoc_collection->owner = 'fedoraAdmin';
  $dtoc_collection->label = 'CWRC DToC Collection';
  $dtoc_collection->models = 'islandora:collectionCModel';
  $dtoc_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', $root_pid);
  // Collection policy.
  $cp = $dtoc_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $cp->label = 'Collection policy';
  $cp->mimetype = 'application/xml';
  $cp->setContentFromFile("$module_path/xml/cwrc_dtoc_collection_policy.xml", FALSE);
  $dtoc_collection->ingestDatastream($cp);

  // Document content model.
  $dtoc_cmodel = $repository->constructObject(CWRC_DTOC_EDITION_ISLANDORA_CONTENT_MODEL);
  $dtoc_cmodel->owner = 'fedoraAdmin';
  $dtoc_cmodel->label = 'CWRC DToC Content Model';
  $dtoc_cmodel->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL.
  $ds = $dtoc_cmodel->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $ds->label = "DS-COMPOSITE-MODEL";
  $ds->mimetype = 'application/xml';
  $ds->setContentFromFile("$module_path/xml/cwrc_dtoc_ds_composite_model.xml", FALSE);
  $dtoc_cmodel->ingestDatastream($ds);

  $objects = array(
    'cwrc_dtoc_edition' => array(
      'title' => 'Islandora CWRC DToC',
      'objects' => array(
        $dtoc_collection,
        $dtoc_cmodel,
      ),
    ),
  );

  return $objects;
}

/**
 * Implements hook_xml_form_builder_form_associations().
 */
function cwrc_dtoc_edition_xml_form_builder_form_associations() {
  return array(
    'cwrc_dtoc_edition_mods_form' => array(
      'content_model' => CWRC_DTOC_EDITION_ISLANDORA_CONTENT_MODEL,
      'form_name' => '* CWRC born digital',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo-information', 'titleInfo', 'title'),
      'transform' => 'cleanup_mods.xsl',
      'self_transform' => 'cleanup_mods.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for islandora_ingest_form.
 */
function cwrc_dtoc_edition_form_islandora_ingest_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form_state['cwrc_dtoc_edition_reveal_form'])) {
    $next_submit = !empty($form['next']) ? $form['next']['#submit'] : array();
    $hidden_submit = !empty($form['hidden_next']) ? $form['hidden_next']['#submit'] : array();
    $reveal_form_submit = 'cwrc_dtoc_edition_reveal_form_submit';
    if ($next_submit === $hidden_submit && in_array($reveal_form_submit, $next_submit)) {
      $form['next']['#submit'][] = 'cwrc_dtoc_edition_reveal_form_batch_submit';
      $form['hidden_next']['#submit'][] = 'cwrc_dtoc_edition_reveal_form_batch_submit';
    }
  }
}

/**
 * Submits handler for the reveal form in charge of initializing the batch.
 *
 * @param array $form
 *   The form structure.
 * @param array $form_state
 *   The form state.
 */
function cwrc_dtoc_edition_reveal_form_batch_submit(array $form, array &$form_state) {
  if (!empty($form_state['cwrc_dtoc_edition_reveal_ingested_object_id']) && !empty($form_state['cwrc_dtoc_edition_reveal_ingested_data'])) {
    $object_id = $form_state['cwrc_dtoc_edition_reveal_ingested_object_id'];
    $collections = $form_state['cwrc_dtoc_edition_reveal_ingested_data']['collections'];
    $corpus_configurations = $form_state['cwrc_dtoc_edition_reveal_ingested_data']['corpus_configuration'];

    // Initializing the batch.
    $batch = array(
      'title' => t('Creating DTOC Edition...'),
      'operations' => array(),
      'init_message' => t('Starting ...'),
      'progress_message' => t('Processed @current out of @total.'),
      'error_message' => t('An error occurred during the creation of the DToC Edition!'),
      'progressive' => FALSE,
      'file' => drupal_get_path('module', 'cwrc_dtoc_edition') . '/includes/dtoc_reveal.form.inc',
    );

    // Preparing source xml data for collections selected items.
    $data = array(
      'name' => 'dtocEdition',
      1 => array('name' => 'sources'),
      2 => array('name' => 'corpusConfiguration'),
    );
    $batch['operations'][] = array(
      'cwrc_dtoc_edition_reveal_form_batch_prepare_collections_source_xml_data',
      array($data, $collections),
    );

    // Preparing collections document files.
    foreach ($collections as $collection_values) {
      $batch['operations'][] = array(
        'cwrc_dtoc_edition_reveal_form_batch_prepare_collection_items_datastream_files',
        array($collection_values),
      );
    }

    // Extract user corpus configurations.
    $batch['operations'][] = array(
      'cwrc_dtoc_edition_reveal_form_batch_get_user_corpus_configurations',
      array($corpus_configurations),
    );

    // Getting corpus metadata.
    $batch['operations'][] = array(
      'cwrc_dtoc_edition_reveal_form_batch_get_corpus_metadata',
      array($object_id),
    );
    // Deleting generated datastream files after generating corpus metadata.
    foreach ($collections as $collection_values) {
      $batch['operations'][] = array(
        'cwrc_dtoc_edition_reveal_form_batch_delete_datastream_files',
        array($collection_values),
      );
    }
    // Preparing source xml data for corpus metadata and configurations.
    $batch['operations'][] = array('cwrc_dtoc_edition_reveal_form_batch_prepare_corpus_configuration_xml_data', array());
    $batch['operations'][] = array('cwrc_dtoc_edition_reveal_form_batch_generate_datastream_content', array($object_id));
    batch_set($batch);
  }
}

/**
 * Implements hook_islandora_ingest_steps() for cwrc:dtocCModel.
 */
function cwrc_dtoc_edition_cwrc_dtocCModel_islandora_ingest_steps() {
  return array(
    'cwrc_dtoc_edition_reveal' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'cwrc_dtoc_edition_reveal_form',
      'module' => 'cwrc_dtoc_edition',
      'file' => 'includes/dtoc_reveal.form.inc',
    ),
  );
}

/**
 * Implements hook_islandora_edit_datastream_registry().
 */
function cwrc_dtoc_edition_islandora_edit_datastream_registry(AbstractObject $object, $dsid) {
  $datastream_id = is_object($dsid) ? $dsid->id : $dsid;
  $has_dtoc_model = in_array(CWRC_DTOC_EDITION_ISLANDORA_CONTENT_MODEL, $object->models, TRUE);
  if ($datastream_id === 'DTOC' && $has_dtoc_model) {
    return array(
      array(
        'name' => t('Islandora CWRC DToC Edition'),
        'url' => "islandora/object/{$object->id}/manage/datastreams/{$datastream_id}/edit",
      ),
    );
  }
}

/**
 * CWRC DToC Edition datastream edit page title callback.
 *
 * @param \AbstractObject|NULL $object
 *   The Fedora Islandora object.
 * @param \AbstractFedoraDatastream|NULL $datastream
 *   The CWRC DToC edition datastream.
 *
 * @return string
 *   The title.
 */
function cwrc_dtoc_edition_datastream_edit_page_title(AbstractObject $object = NULL, AbstractFedoraDatastream $datastream = NULL) {
  if ($object && $datastream && $datastream->id === 'DTOC') {
    $title = t('Edit "@label" CWRC DToC Edition datastream', array(
      '@label' => $object->label,
    ));
  }
  else {
    $title = t('Edit CWRC DToC Edition datastream');
  }
  return $title;
}

/**
 * Implements hook_cmodel_pid_islandora_view_object() for cwrc:dtocCModel.
 */
function cwrc_dtoc_edition_cwrc_dtocCModel_islandora_view_object($object) {
  $output = theme('cwrc_dtoc_edition', array('islandora_object' => $object));
  return array('' => $output);
}

/**
 * Gets selected collection files from session.
 *
 * @param string $pid
 *   The collection pid.
 *
 * @return array
 *   The selected files.
 */
function cwrc_dtoc_edition_get_selected_collection_files_from_session($pid) {
  return !empty($_SESSION[CWRC_DTOC_EDITION_SESSION_KEY][$pid]) ? $_SESSION[CWRC_DTOC_EDITION_SESSION_KEY][$pid] : array();
}

/**
 * Sets selected collection files in the session.
 *
 * @param string $id
 *   The object id.
 * @param array $selected_files
 *   The selected files.
 */
function cwrc_dtoc_edition_set_selected_collection_files_in_session($id, array $selected_files) {
  $_SESSION[CWRC_DTOC_EDITION_SESSION_KEY][$id] = $selected_files;
}

/**
 * Deletes a collection items from the session.
 *
 * @param string $id
 *   The collection id.
 */
function cwrc_dtoc_edition_delete_selected_collection_files_from_session($id = '') {
  if ($id) {
    unset($_SESSION[CWRC_DTOC_EDITION_SESSION_KEY][$id]);
  }
  else {
    unset($_SESSION[CWRC_DTOC_EDITION_SESSION_KEY]);
  }
}

/**
 * Helper functions.
 */

/**
 * Gets child options for a collection object.
 *
 * @param \FedoraObject $object
 *   The object.
 *
 * @return array
 *   The options.
 */
function _cwrc_dtoc_edition_get_collection_pid_options(\FedoraObject $object) {
  module_load_include('inc', 'islandora_plotit', 'includes/voyant_helpers');
  module_load_include('inc', 'islandora_cwrc_writer', 'includes/utilities');

  $ri_result = NULL;
  islandora_cwrc_voyant_get_members_via_ri($object, $ri_result);

  $options = array();
  if ($ri_result && count($ri_result) > 0) {
    $pids = array_map(function ($ri_result) {
      return $ri_result['object']['value'];
    }, $ri_result);

    foreach ($pids as $pid) {
      $collection_child = islandora_object_load($pid);
      $is_cwrc_doc = _cwrc_dtoc_edition_collection_child_has_cwrc_document_cmodel($collection_child);
      $has_supported_schema = $is_cwrc_doc ? _cwrc_dtoc_edition_collection_child_document_has_supported_schema($collection_child) : FALSE;
      if ($is_cwrc_doc && $has_supported_schema) {
        $options[$pid] = $collection_child->label;
      }
    }
  }
  return $options;
}

/**
 * Checks if a given object has CWRC document CModel.
 *
 * @param \FedoraObject $object
 *   The object.
 *
 * @return bool
 *   The check.
 */
function _cwrc_dtoc_edition_collection_child_has_cwrc_document_cmodel(\FedoraObject $object) {
  if (!$object) {
    return FALSE;
  }
  $models = !empty($object->models) ? $object->models : array();
  return in_array('cwrc:documentCModel', $models, TRUE);
}

/**
 * Checks whether a supplied object has a supported schema.
 *
 * @param \FedoraObject $object
 *   The object.
 *
 * @return bool
 *   TRUE the supported schema available , FALSE otherwise.
 */
function _cwrc_dtoc_edition_collection_child_document_has_supported_schema(\FedoraObject $object) {
  if (!$object) {
    return FALSE;
  }

  $supported_mappings = array('tei', 'orlando');
  module_load_include('inc', 'islandora_cwrc_writer', 'includes/utilities');
  $schema = islandora_cwrc_writer_get_document_schema_object($object);
  $schema_mapping = $schema ? islandora_cwrc_writer_get_schema_mapping($schema) : '';

  return in_array($schema_mapping, $supported_mappings, TRUE);
}
