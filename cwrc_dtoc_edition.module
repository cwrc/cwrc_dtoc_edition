<?php

/**
 * @file
 * The cwrc_dtoc_edition module.
 */

define('CWRC_DTOC_EDITION_ISLANDORA_CONTENT_MODEL', 'cwrc:dtocCModel');
define('CWRC_DTOC_EDITION_ISLANDORA_COLLECTION_PID', 'cwrc:dtocCollection');
define('CWRC_DTOC_EDITION_SESSION_KEY', 'cwrc_dtoc_edition_collections');

/**
 * Implements hook_menu().
 */
function cwrc_dtoc_edition_menu() {
  $items = array();

  // @todo reviews permissions access.
  $items['dtoc-edition/files-selector/%islandora_object/%ctools_js'] = array(
    'title' => 'Files selector',
    'title callback' => 'cwrc_dtoc_edition_ctools_modal_collection_files_selector_title',
    'title arguments' => array(2),
    'page callback' => 'cwrc_dtoc_edition_ctools_modal_collection_files_selector',
    'page arguments' => array(2, 3),
    // Using the same access arguments as islandora/basic_collection/find
    // collections_user allows users to search for collections.
    'access callback' => TRUE,
    // 'access arguments' => array(ISLANDORA_BASIC_COLLECTION_MIGRATE_COLLECTION_MEMBERS),
    'file' => 'includes/dtoc_reveal.endpoint.inc',
    'type' => MENU_CALLBACK,
  );

  $items['islandora/object/%islandora_object/manage/datastreams/%islandora_datastream/edit'] = array(
    'title' => 'Edit CWRC DToC Edition datastream',
    'title callback' => 'cwrc_dtoc_edition_datastream_edit_page_title',
    'title arguments' => array(2, 5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cwrc_dtoc_edition_reveal_form', 2, 5),
    'access callback' => 'islandora_datastream_access',
    'access arguments' => array(ISLANDORA_METADATA_EDIT, 5),
    'file' => 'includes/dtoc_reveal.form.inc',
    'type' => MENU_CALLBACK,
    'load arguments' => array(2),
  );

  $items['dtoc-edition/search-autocomplete'] = array(
    'title' => 'Dynamic Table of Context search autocomplete',
    'page callback' => 'cwrc_dtoc_edition_search_autocomplete',
    'type' => MENU_CALLBACK,
    'file' => 'includes/cwrc_dtoc_edition.search.inc',
    'access callback' => TRUE,
  );

  $items['dtoc-edition/curator-id-update/%islandora_object/%/%ctools_js'] = array(
    'title' => 'Curator update',
    'title callback' => 'cwrc_dtoc_edition_ctools_modal_curator_update_title',
    'title arguments' => array(2),
    'page callback' => 'cwrc_dtoc_edition_ctools_modal_curator_update',
    'page arguments' => array(2, 3, 4),
    'access callback' => 'islandora_object_access',
    'access arguments' => array(ISLANDORA_METADATA_EDIT, 2),
    'file' => 'includes/dtoc_curator.update.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function cwrc_dtoc_edition_theme($existing, $type, $theme, $path) {
  return array(
    'cwrc_dtoc_edition' => array(
      'variables' => array(
        'islandora_object' => NULL,
        'edit_access' => FALSE,
        'dtoc_array' => array(),
      ),
      'pattern' => 'cwrc_dtoc_edition__',
      'template' => 'theme/cwrc-dtoc-edition',
      'file' => 'theme/cwrc_dtoc_edition.theme.inc',
    ),
  );
}

/**
 * Implements hook_library_alter().
 */
function cwrc_dtoc_edition_library_alter(&$libraries, $module) {
  if ($module !== 'system' || empty($libraries['drupal.states'])) {
    return;
  }

  $path = current_path();
  $target_url = 'manage/overview/ingest';
  if (strpos($path, $target_url) === FALSE) {
    return;
  }

  $settings = $libraries['drupal.states']['js']['misc/states.js'];
  unset($libraries['drupal.states']['js']['misc/states.js']);
  $new_path = drupal_get_path('module', 'cwrc_dtoc_edition') . '/js/states.js';
  $libraries['drupal.states']['js'][$new_path] = $settings;
}

/**
 * Implements hook_islandora_required_objects().
 */
function cwrc_dtoc_edition_islandora_required_objects(IslandoraTuque $connection) {
  // Build a thumbnail datastream.
  $module_path = drupal_get_path('module', 'cwrc_dtoc_edition');
  $repository = $connection->repository;
  $root_pid = variable_get('islandora_repository_pid', 'islandora:root');

  // Collection object.
  $dtoc_collection = $repository->constructObject(CWRC_DTOC_EDITION_ISLANDORA_COLLECTION_PID);
  $dtoc_collection->owner = 'fedoraAdmin';
  $dtoc_collection->label = 'CWRC DToC Collection';
  $dtoc_collection->models = 'islandora:collectionCModel';
  $dtoc_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', $root_pid);
  // Collection policy.
  $cp = $dtoc_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $cp->label = 'Collection policy';
  $cp->mimetype = 'application/xml';
  $cp->setContentFromFile("$module_path/xml/cwrc_dtoc_collection_policy.xml", FALSE);
  $dtoc_collection->ingestDatastream($cp);

  // Document content model.
  $dtoc_cmodel = $repository->constructObject(CWRC_DTOC_EDITION_ISLANDORA_CONTENT_MODEL);
  $dtoc_cmodel->owner = 'fedoraAdmin';
  $dtoc_cmodel->label = 'CWRC DToC Content Model';
  $dtoc_cmodel->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL.
  $ds = $dtoc_cmodel->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $ds->label = "DS-COMPOSITE-MODEL";
  $ds->mimetype = 'application/xml';
  $ds->setContentFromFile("$module_path/xml/cwrc_dtoc_ds_composite_model.xml", FALSE);
  $dtoc_cmodel->ingestDatastream($ds);

  $objects = array(
    'cwrc_dtoc_edition' => array(
      'title' => 'Islandora CWRC DToC',
      'objects' => array(
        $dtoc_collection,
        $dtoc_cmodel,
      ),
    ),
  );

  return $objects;
}

/**
 * Implements hook_xml_form_builder_form_associations().
 */
function cwrc_dtoc_edition_xml_form_builder_form_associations() {
  return array(
    'cwrc_dtoc_edition_mods_form' => array(
      'content_model' => CWRC_DTOC_EDITION_ISLANDORA_CONTENT_MODEL,
      'form_name' => '* CWRC born digital',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo-information', 'titleInfo', 'title'),
      'transform' => 'sites/default/libraries/islandora_cwrc_xslt_library/xslt/mods_to_dc.xsl',
      'self_transform' => 'cleanup_mods.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for islandora_ingest_form.
 */
function cwrc_dtoc_edition_form_islandora_ingest_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form_state['cwrc_dtoc_edition_reveal_form'])) {
    $next_submit = !empty($form['next']) ? $form['next']['#submit'] : array();
    $hidden_submit = !empty($form['hidden_next']) ? $form['hidden_next']['#submit'] : array();
    $reveal_form_submit = 'cwrc_dtoc_edition_reveal_form_submit';
    if ($next_submit === $hidden_submit && in_array($reveal_form_submit, $next_submit)) {
      $form['next']['#submit'][] = 'cwrc_dtoc_edition_reveal_form_batch_submit';
      $form['hidden_next']['#submit'][] = 'cwrc_dtoc_edition_reveal_form_batch_submit';
    }
  }
}

/**
 * Submits handler for the reveal form in charge of initializing the batch.
 *
 * @param array $form
 *   The form structure.
 * @param array $form_state
 *   The form state.
 */
function cwrc_dtoc_edition_reveal_form_batch_submit(array $form, array &$form_state) {
  if (!empty($form_state['cwrc_dtoc_edition_reveal_ingested_object_id']) && !empty($form_state['cwrc_dtoc_edition_reveal_ingested_data'])) {
    $object_id = $form_state['cwrc_dtoc_edition_reveal_ingested_object_id'];
    $collections = $form_state['cwrc_dtoc_edition_reveal_ingested_data']['collections'];
    $corpus_configurations = $form_state['cwrc_dtoc_edition_reveal_ingested_data']['corpus_configuration'];

    _cwrc_dtoc_edition_set_batch_operations($object_id, $collections, $corpus_configurations);
  }
}

/**
 * Implements hook_islandora_ingest_steps() for cwrc:dtocCModel.
 */
function cwrc_dtoc_edition_cwrc_dtocCModel_islandora_ingest_steps() {
  return array(
    'cwrc_dtoc_edition_reveal' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'cwrc_dtoc_edition_reveal_form',
      'module' => 'cwrc_dtoc_edition',
      'file' => 'includes/dtoc_reveal.form.inc',
    ),
  );
}

/**
 * Implements hook_islandora_edit_datastream_registry().
 */
function cwrc_dtoc_edition_islandora_edit_datastream_registry(AbstractObject $object, $dsid) {
  $datastream_id = is_object($dsid) ? $dsid->id : $dsid;
  $has_dtoc_model = in_array(CWRC_DTOC_EDITION_ISLANDORA_CONTENT_MODEL, $object->models, TRUE);
  if ($datastream_id === 'DTOC' && $has_dtoc_model) {
    return array(
      array(
        'name' => t('Islandora CWRC DToC Edition'),
        'url' => "islandora/object/{$object->id}/manage/datastreams/{$datastream_id}/edit",
      ),
    );
  }
}

/**
 * CWRC DToC Edition datastream edit page title callback.
 *
 * @param \AbstractObject|NULL $object
 *   The Fedora Islandora object.
 * @param \AbstractFedoraDatastream|NULL $datastream
 *   The CWRC DToC edition datastream.
 *
 * @return string
 *   The title.
 */
function cwrc_dtoc_edition_datastream_edit_page_title(AbstractObject $object = NULL, AbstractFedoraDatastream $datastream = NULL) {
  if ($object && $datastream && $datastream->id === 'DTOC') {
    $title = t('Edit "@label" CWRC DToC Edition datastream', array(
      '@label' => $object->label,
    ));
  }
  else {
    $title = t('Edit CWRC DToC Edition datastream');
  }
  return $title;
}

/**
 * Implements hook_cmodel_pid_islandora_view_object() for cwrc:dtocCModel.
 */
function cwrc_dtoc_edition_cwrc_dtocCModel_islandora_view_object($object) {
  $datastream = !empty($object['DTOC']) ? $object['DTOC'] : NULL;
  $dtoc_array = $datastream ? _cwrc_dtoc_edition_xml_content_to_array($datastream->content) : array();

  // Check if any sources have been updated.
  $form_state['build_info']['args'] = array();
  $form_state['islandora_object'] = $object;
  $form_state['dtoc_array'] = $dtoc_array;
  $form = drupal_build_form('cwrc_dtoc_edition_refresh_form', $form_state);
  $access = $datastream ? islandora_datastream_access(ISLANDORA_METADATA_EDIT, $datastream) : FALSE;
  $form['#access'] = $access;
  $output = theme('cwrc_dtoc_edition', array(
    'islandora_object' => $object,
    'edit_access' => $access,
    'dtoc_array' => $dtoc_array,
  ));
  return array(
    'dtoc_iframe' => $output,
    'status_form' => $form,
  );
}

function cwrc_dtoc_edition_refresh_form($form, &$form_state) {
  $object = $form_state['islandora_object'];
  $module_name = 'cwrc_dtoc_edition';
  $path = drupal_get_path('module', $module_name);
  $lazy_load_trigger_class = 'lazy-loader-trigger';
  $dtoc_arr = !empty($form_state['dtoc_array']) ? $form_state['dtoc_array'] : array();
  $has_corpus_id = $dtoc_arr && !empty($dtoc_arr['corpusConfiguration']['id']);

  $values = !empty($form_state['values']) ? $form_state['values'] : array();
  $lazy_load_triggered = !empty($values['lazy_load_trigger']) ? (bool) $values['lazy_load_trigger'] : FALSE;

  // Preparing settings to pass to our js.
  $js_settings[$module_name] = array(
    'lazy_load_trigger_class' => $lazy_load_trigger_class,
    'trigger_lazy_load' => !$lazy_load_triggered,
  );

  $form['lazy_load_trigger'] = array(
    '#type' => 'checkbox',
    '#title' => t('Custom checkbox to trigger checking of documents update status.'),
    '#title_display' => 'invisible',
    '#attributes' => array('class' => array($lazy_load_trigger_class)),
    '#ajax' => array(
      'callback' => 'cwrc_dtoc_edition_check_documents_status_form_ajax_callback',
      'wrapper' => 'cwrc-dtoc-edition--documents-status--wrapper',
      'effect' => 'fade',
      'progress' => array(
        'type' => 'throbber',
        'message' => t("Loading...<br>Checking if any document included in this edition have been updated since it's creation."),
      ),
    ),
    '#attached' => array(
      'js' => array(
        array('type' => 'setting', 'data' => $js_settings),
        array('type' => 'file', 'data' => $path . '/js/refresh.js'),
      ),
      'css' => array($path . '/css/refresh.css'),
    ),
    '#default_value' => $lazy_load_triggered ? 1 : 0,
    // Doing this will stop the lazy load checkbox to be triggered if no corpus
    // id is found.
    '#access' => $has_corpus_id,
  );

  $form['documents_status'] = array(
    '#prefix' => '<div id="cwrc-dtoc-edition--documents-status--wrapper" class="document-statuses">',
    '#suffix' => '</div>',
    '#type' => 'container',
    '#tree' => TRUE,
  );

  $re_ingest = FALSE;
  $submit_value = t('Update edition');
  if ($lazy_load_triggered && !empty($object['DTOC'])) {
    module_load_include('inc', 'cwrc_dtoc_edition', 'includes/cwrc_dtoc_edition.documents_statuses');
    if ($documents_statuses = cwrc_dtoc_edition_refresh_get_documents_statuses($object['DTOC'], $dtoc_arr)) {
      $re_ingest = TRUE;
      $form['documents_status']['update_intro'] = array(
        '#markup' => t('<p>The following sources of <b>@label</b> have been updated:</p>', array(
          '@label' => $object->label,
        )),
      );
      $collection_counter = 1;
      $collections_total = count($documents_statuses);
      foreach ($documents_statuses as $collection_pid => $collection) {
        $form['documents_status'][$collection_pid] = array(
          '#type' => 'container',
          '#tree' => TRUE,
          '#prefix' => $collection_counter === 1 ? '<ul class="clearfix collection-items"><li>' : '<li>',
          '#suffix' => $collection_counter === $collections_total ? '</li></ul>' : '</li>',
          'label' => array(
            '#type' => 'item',
            '#markup' => t('@label', array('@label' => $collection['label'])),
          ),
          'pid' => array(
            '#type' => 'value',
            '#value' => $collection_pid,
          ),
        );
        $form['documents_status'][$collection_pid]['documents'] = array(
          '#type' => 'container',
          '#tree' => TRUE,
          '#prefix' => '<ul class="clearfix collection-documents-items">',
          '#suffix' => '</ul>',
        );
        foreach ($collection['documents'] as $document_pid => $document_label) {
          $form['documents_status'][$collection_pid]['documents'][$document_pid] = array(
            '#type' => 'container',
            '#tree' => TRUE,
            '#prefix' => '<li>',
            '#suffix' => '</li>',
            'label' => array(
              '#type' => 'item',
              '#markup' => t('<a href="/islandora/object/@pid">@label</a>', array(
                '@label' => $document_label,
                '@pid' => $document_pid,
              )),
            ),
            'pid' => array(
              '#type' => 'value',
              '#value' => $document_pid,
            ),
          );
        }
      }
    }
  }
  elseif ($dtoc_arr && empty($dtoc_arr['corpusConfiguration']['id'])) {
    $re_ingest = TRUE;
    $submit_value = t('Generate corpus');
    $form['documents_status']['update_intro'] = array(
      '#markup' => t('<p>We are unable to retrieve the corpus from Voyant. Please refresh the page in a couple of minutes. If the problem persists, try to regenerate the corpus by <a href="@href" title="edit DToC datastream">editing its metadata or DToC datastream</a>. If this method fails, <a href="@bug" title="report the bug">contact CWRC</a>.</p>', array(
        '@href' => '/islandora/object/' . $object->id . '/manage/datastreams/DTOC/edit',
        '@bug' => '/content/bug-reporting',
      )),
    );
  }
  $form['documents_status']['re_ingest'] = array(
    '#type' => 'submit',
    '#value' => $submit_value,
    '#prefix' => '<div class="document-statuses--ingest-action">',
    '#suffix' => '</div>',
    '#access' => $re_ingest,
  );

  return $form;
}

/**
 * Ajax callback for checking documents status.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 *
 * @return array
 *   The document status tree wrapper array.
 */
function cwrc_dtoc_edition_check_documents_status_form_ajax_callback(array $form, array $form_state) {
  return $form['documents_status'];
}

/**
 * Submits callback for cwrc_dtoc_edition_refresh_form().
 *
 * @param array $form
 *   The form structure.
 * @param array $form_state
 *   The form state.
 */
function cwrc_dtoc_edition_refresh_form_submit(array $form, array &$form_state) {
  $object = $form_state['islandora_object'];
  $datastream = $object['DTOC'];

  $data = _cwrc_dtoc_edition_xml_content_to_array($datastream->content);
  $collections = _cwrc_dtoc_edition_get_collections_from_dtoc_xml_array($data);

  // Setting a redirect.
  $form_state['redirect'] = "islandora/object/{$object->id}";

  // Corpus configurations.
  $corpus_configurations = _cwrc_dtoc_edition_get_corpus_configurations_from_dtoc_xml_array($data);

  // Set the batch operations.
  _cwrc_dtoc_edition_set_batch_operations($object->id, $collections, $corpus_configurations);

  drupal_set_message(t('CWRC DToC edition was successfully refreshed'));
}

/**
 * Gets selected collection files from session.
 *
 * @param string $pid
 *   The collection pid.
 *
 * @return array
 *   The selected files.
 */
function cwrc_dtoc_edition_get_selected_collection_files_from_session($pid) {
  return !empty($_SESSION[CWRC_DTOC_EDITION_SESSION_KEY][$pid]) ? $_SESSION[CWRC_DTOC_EDITION_SESSION_KEY][$pid] : array();
}

/**
 * Sets selected collection files in the session.
 *
 * @param string $id
 *   The object id.
 * @param array $selected_files
 *   The selected files.
 */
function cwrc_dtoc_edition_set_selected_collection_files_in_session($id, array $selected_files) {
  $_SESSION[CWRC_DTOC_EDITION_SESSION_KEY][$id] = $selected_files;
}

/**
 * Deletes a collection items from the session.
 *
 * @param string $id
 *   The collection id.
 */
function cwrc_dtoc_edition_delete_selected_collection_files_from_session($id = '') {
  if ($id) {
    unset($_SESSION[CWRC_DTOC_EDITION_SESSION_KEY][$id]);
  }
  else {
    unset($_SESSION[CWRC_DTOC_EDITION_SESSION_KEY]);
  }
}

/**
 * Batch helpers functions.
 */

function cwrc_dtoc_edition_reveal_form_batch_prepare_collection_items_datastream_files(array $collection_values, &$context) {
  $pid = $collection_values['pid'];
  $label = $collection_values['label'];
  $selected_documents = $collection_values['selected_files'];
  $context['results']['documents_created_times'] = array();
  $context['message'] = t('Generating xml datastream file for @label (@id)', array(
    '@label' => $label,
    '@id' => $pid,
  ));

  $collection_files = _cwrc_dtoc_edition_reveal_form_get_collection_selected_documents_files($pid, $selected_documents);
  $context['results']['dtoc_input_files'][$pid] = $collection_files;
  $files_url_query = !empty($context['results']['dtoc_input_files_query']) ? $context['results']['dtoc_input_files_query'] : '';
  foreach ($collection_files as $file_pid => $file) {
    $files_url_query .= $file['url'] . '%0A';
    $context['results']['documents_created_timestamp'][$file_pid] = $file['created_timestamp'];
  }
  $context['results']['dtoc_input_files_query'] = $files_url_query;
}

/**
 * Prepares the selected collections and their documents to be inserted into data.
 *
 * @param array $data
 *   The data to be stored in xml.
 * @param array $collections
 *   Selected collections.
 * @param array $context
 *   The batch context.
 */
function cwrc_dtoc_edition_reveal_form_batch_prepare_collections_source_xml_data(array $data, array $collections, array &$context) {
  $collection_counter = 1;
  $documents_created_timestamp = !empty($context['results']['documents_created_timestamp']) ? $context['results']['documents_created_timestamp'] : array();
  $context['message'] = t('Preparing xml datastream data for selected collections');

  foreach ($collections as $collection) {
    $selected_documents = $collection['selected_files'];
    unset($collection['selected_files'], $collection['actions']);
    $data[1][$collection_counter] = array(
      'name' => 'collection',
      'attributes' => $collection,
    );
    $document_counter = 1;
    foreach ($selected_documents as $object_id => $object_label) {
      $data[1][$collection_counter][$document_counter] = array(
        'name' => 'document',
        'attributes' => array(
          'pid' => $object_id,
          'label' => $object_label,
          'createdTimestamp' => isset($documents_created_timestamp[$object_id]) ? $documents_created_timestamp[$object_id] : 0,
        ),
      );
      $document_counter++;
    }
    $collection_counter++;
  }
  $context['results']['xml_data'] = $data;
}

function cwrc_dtoc_edition_reveal_form_batch_get_user_corpus_configurations(array $corpus_configurations, &$context) {
  $xpaths = array();
  $context['results']['xml_xpaths_setup'] = array();
  $is_from_cwrc_dtoc_edition = !empty($corpus_configurations['copy_cwrc_edition']['optin']);
  $is_from_voyant_dtoc_edition = !empty($corpus_configurations['copy_dtoc_edition']['optin']);
  $is_custom_xpaths = !empty($corpus_configurations['custom']['optin']);
  $supported_xpath = array(
    'xmlAuthorXpath',
    'xmlContentXpath',
    'xmlDocumentsXpath',
    'xmlTitleXpath',
  );
  $context['message'] = t('Getting xPaths customization from corpus configurations...');

  if ($is_from_cwrc_dtoc_edition && !empty($corpus_configurations['copy_cwrc_edition']['search'])) {
    $pid = $corpus_configurations['copy_cwrc_edition']['search'];
    if (($dtoc_edition_object = islandora_object_load($pid)) && !empty($dtoc_edition_object['DTOC'])) {
      $data = _cwrc_dtoc_edition_xml_content_to_array($dtoc_edition_object['DTOC']->content);
      $xpaths = !empty($data['corpusConfiguration']['xmlXpathExpressions']) ? $data['corpusConfiguration']['xmlXpathExpressions'] : array();
    }
    $context['results']['xml_xpaths_setup']['type'] = 'copy_cwrc_edition';
    $context['results']['xml_xpaths_setup']['value'] = $pid;
  }
  elseif ($is_from_voyant_dtoc_edition && !empty($corpus_configurations['copy_dtoc_edition']['search'])) {
    $url_arr = drupal_parse_url($corpus_configurations['copy_dtoc_edition']['search']);
    $corpus = $url_arr['query']['corpus'];
    $tool = 'corpus.DocumentsMetadata';
    $path = 'https://voyant-tools.org/trombone';
    $query = array(
      'corpus' => $corpus,
      'tool' => $tool,
    );
    $url = url($path, array('query' => $query));
    $request = drupal_http_request($url);
    if ($request->code === '200') {
      $request_data = drupal_json_decode($request->data);
      if (!empty($request_data['documentsMetadata']['total']) && $request_data['documentsMetadata']['total'] >= 1) {
        $query_parameters = $request_data['documentsMetadata']['documents'][0]['parent_queryParameters'];
        $query_parameters = decode_entities($query_parameters);
        parse_str($query_parameters, $data);
        $xpaths = array_intersect_key($data, drupal_map_assoc($supported_xpath));
      }
    }
    $context['results']['xml_xpaths_setup']['type'] = 'copy_dtoc_edition';
    $context['results']['xml_xpaths_setup']['value'] = $corpus_configurations['copy_dtoc_edition']['search'];
  }
  elseif ($is_custom_xpaths && !empty($corpus_configurations['custom']['options']['xpaths'])) {
    $custom_xpaths = $corpus_configurations['custom']['options']['xpaths'];
    foreach ($supported_xpath as $xpath_key) {
      $xpath_key_form = strtolower(substr($xpath_key, 0, -5));
      if (!empty($custom_xpaths[$xpath_key_form])) {
        $xpaths[$xpath_key] = $custom_xpaths[$xpath_key_form];
      }
    }
    $context['results']['xml_xpaths_setup']['type'] = 'custom';
    $context['results']['xml_xpaths_setup']['curation'] = $corpus_configurations['custom']['options']['curation'];
  }
  else {
    // We assume the user didn't want to provide any customization so we use the
    // dtoc inputFormat.
    $context['results']['input_format'] = 'dtoc';
  }
  $context['results']['xml_xpaths'] = $xpaths;
}

function cwrc_dtoc_edition_reveal_form_batch_get_corpus_metadata($pid, &$context) {
  $input = !empty($context['results']['dtoc_input_files_query']) ? $context['results']['dtoc_input_files_query'] : '';
  $xpaths = $context['results']['xml_xpaths'];
  $input_format = !empty($context['results']['input_format']) ? $context['results']['input_format'] : '';
  $trombone_data = array();
  $context['message'] = t('Getting corpus metadata from Voyant...');

  if ($input) {
    $target_url = 'https://voyant-tools.org/trombone';
    $input = substr($input, 0, -3);
    $input = str_replace(array('%3A', '.xml%250A'), array(':', '.xml%0A'), $input);

    // Initializing default parameters.
    $parameters = array(
      'palette' => 'default',
      'inkeTags' => 'false',
      'suppressTools' => 'false',
      'input' => $input,
      'tool' => 'corpus.CorpusMetadata',
    );
    if ($input_format) {
      $parameters['inputFormat'] = $input_format;
    }
    // Adding xPath user options.
    foreach ($xpaths as $key => $option) {
      $parameters[$key] = $option;
    }

    // Adding title and subTitle based MODS datastream.
    if (($object = islandora_object_load($pid)) && !empty($object['MODS'])) {
      $mods_datastream = $object['MODS'];
      $mods_data = _cwrc_dtoc_edition_xml_content_to_array($mods_datastream->content);
      if (!empty($mods_data['titleInfo']['title'])) {
        $parameters['title'] = $mods_data['titleInfo']['title'];
      }

      if (!empty($mods_data['titleInfo']['subTitle'])) {
        $parameters['subTitle'] = $mods_data['titleInfo']['subTitle'];
      }
    }

    $data = drupal_http_build_query($parameters);
    $data = str_replace(array('%3A', '.xml%250A'), array(':', '.xml%0A'), $data);
    $url = url($target_url);
    $request_options = array(
      'headers' => array(
        'Content-Type' => 'application/x-www-form-urlencoded; charset=UTF-8',
      ),
      'method' => 'POST',
      'data' => $data,
    );
    $result = drupal_http_request($url, $request_options);
    if ($result->code != '200') {
      $code = $result->code;
      $message = '<p>Error code: %code<br>Error message: %error<br>Query: %query</p><p>%data</p>';
      $variables = array(
        '%code' => $code,
        '%error' => $result->error,
        '%query' => $data,
        '%data' => $code != -1 ? $result->data : '<none>',
      );
      watchdog(
        'cwrc_dtoc_edition',
        $message,
        $variables,
        WATCHDOG_WARNING,
        current_path()
      );
      drupal_set_message(t('An error occurred during the communication with Voyant. Try again later.'), 'error');
    }
    else {
      $message = '<p>Request code: %code<br>Query: %query</p><p>%data</p>';
      $variables = array(
        '%code' => $result->code,
        '%query' => $data,
        '%data' => $result->data,
      );
      watchdog(
        'cwrc_dtoc_edition',
        $message,
        $variables,
        WATCHDOG_NOTICE
      );
      $trombone_data = drupal_json_decode($result->data);
    }
  }
  $context['results']['trombone_data'] = $trombone_data;
}

function cwrc_dtoc_edition_reveal_form_batch_delete_datastream_files(array $collection_values, &$context) {
  $pid = $collection_values['pid'];
  $label = $collection_values['label'];
  $context['message'] = t('Deleting generated xml datastream file for @label (@id)', array(
    '@label' => $label,
    '@id' => $pid,
  ));
  $files_by_collection = !empty($context['results']['dtoc_input_files'][$pid]) ? $context['results']['dtoc_input_files'][$pid] : array();
  foreach ($files_by_collection as $file) {
    file_unmanaged_delete($file['uri']);
  }
}

function cwrc_dtoc_edition_reveal_form_batch_prepare_corpus_configuration_xml_data(&$context) {
  $xml_corpus_id_key = 1;
  $xml_corpus_configure_key = 2;
  $xml_xpaths_key = 3;
  $xml_trombone_key = 4;
  $trombone_data = !empty($context['results']['trombone_data']) ? $context['results']['trombone_data'] : array();
  $data = !empty($context['results']['xml_data']) ? $context['results']['xml_data'] : array();
  $xml_xpaths = !empty($context['results']['xml_xpaths']) ? $context['results']['xml_xpaths'] : array();
  $context['message'] = t('Preparing xml datastream data for corpus configuration and metadata from Voyant...');

  // Adding corpus metadata to our xml.
  if ($trombone_data && !empty($trombone_data['corpus']['metadata']['id'])) {
    $corpus_metadata = $trombone_data['corpus']['metadata'];

    // Setting up the corpus id.
    $data[2][$xml_corpus_id_key] = array(
      'name' => 'id',
      'value' => $corpus_metadata['id'],
    );

    // Setting up other trombone stuff.
    $data[2][$xml_trombone_key] = array(
      'name' => 'trombone',
      'attributes' => array(),
    );
    // Adding trombone data as attributes.
    foreach ($trombone_data as $data_name => $data_value) {
      if ($data_name !== 'corpus' && (is_string($data_value) || is_numeric($data_value))) {
        $data[2][$xml_trombone_key]['attributes'][$data_name] = $data_value;
      }
    }
    // Adding corpus metadata from trombone.
    $data[2][$xml_trombone_key][1] = array(
      'name' => 'CorpusMetadata',
    );
    $xml_data_counter = 1;
    foreach ($corpus_metadata as $metadata_label => $metadata_value) {
      if ($metadata_label !== 'id' && (is_string($metadata_value) || is_numeric($metadata_value))) {
        $data[2][$xml_trombone_key][1][$xml_data_counter] = array(
          'name' => $metadata_label,
          'value' => $metadata_value,
        );
        $xml_data_counter++;
      }
      elseif ($metadata_label === 'languageCodes' && is_array($metadata_value)) {
        // Dealing with language codes which is an array.
        $data[2][$xml_trombone_key][1][$xml_data_counter] = array(
          'name' => $metadata_label,
        );
        foreach ($metadata_value as $language_code) {
          $data[2][$xml_trombone_key][1][$xml_data_counter][] = array(
            'name' => 'language',
            'value' => $language_code,
          );
        }
        $xml_data_counter++;
      }
    }
  }

  // Adding the way xml xpaths configurations was applied.
  $corpus_configuration_setup = $context['results']['xml_xpaths_setup'];
  if (!empty($corpus_configuration_setup['type'])) {
    $data[2][$xml_corpus_configure_key] = array(
      'name' => 'userSettings',
      'attributes' => array('type' => $corpus_configuration_setup['type']),
    );
    $type = $corpus_configuration_setup['type'];
    if ($type === 'copy_dtoc_edition' || $type === 'copy_cwrc_edition') {
      $data[2][$xml_corpus_configure_key]['attributes']['value'] = $corpus_configuration_setup['value'];
    }
    else {
      $curation = $corpus_configuration_setup['curation'];
      $data[2][$xml_corpus_configure_key][1] = array(
        'name' => 'curation',
        'attributes' => array(
          'id' => !empty($curation['id']) ? $curation['id'] : '',
          'from' => !empty($curation['from']) ? $curation['from'] : '',
        ),
        'value' => !empty($curation['custom']) ? $curation['custom'] : '',
      );
    }
  }

  // Adding custom xml configuration provided.
  $xml_data_counter = 1;
  $data[2][$xml_xpaths_key] = array('name' => 'xmlXpathExpressions');
  foreach ($xml_xpaths as $xml_xpath_label => $xml_xpath) {
    $data[2][$xml_xpaths_key][$xml_data_counter] = array(
      'name' => $xml_xpath_label,
      'value' => $xml_xpath,
    );
    $xml_data_counter++;
  }

  ksort($data[2]);
  // @todo add corpus configuration from the form.
  $context['results']['xml_data'] = $data;
}

function cwrc_dtoc_edition_reveal_form_batch_generate_datastream_content($pid, &$context) {
  $data = $context['results']['xml_data'];
  $context['message'] = t('Creating the DToC datastream...');
  if ($object = islandora_object_load($pid)) {
    $dsid = 'DTOC';
    $datastream = isset($object[$dsid]) ? $object[$dsid] : $object->constructDatastream($dsid, 'M');

    module_load_include('inc', 'cwrc_dtoc_edition', 'includes/cwrc_dtoc_edition.xml_generation_helper');
    $xml = cwrc_dtoc_edition_get_xml($data);

    $datastream->label = $dsid;
    $datastream->mimetype = 'application/xml';
    $datastream->setContentFromString($xml);

    // Ingest the datastream if it isn't yet.
    if (!isset($object[$dsid])) {
      $object->ingestDatastream($datastream);
    }
  }
  else {
    watchdog('cwrc_dtoc_edition', 'was unable to load the object with PID: @pid - given', array('@pid' => $pid), WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for xml_form_builder_datastream_form().
 */
function cwrc_dtoc_edition_form_xml_form_builder_datastream_form_alter(&$form, &$form_state, $form_id) {
  if (empty($form_state['datastream']) || empty($form_state['association']['content_model']) || $form_state['association']['content_model'] !== CWRC_DTOC_EDITION_ISLANDORA_CONTENT_MODEL || empty($form_state['pid'])) {
    return;
  }
  $form['update']['#submit'][] = 'cwrc_dtoc_edition_datastream_form_metadata_form_submit';
}

/**
 * Submit callback to update DToC corpus metadata when MODS metadata updated.
 *
 * See cwrc_dtoc_edition_form_xml_form_builder_datastream_form_alter().
 */
function cwrc_dtoc_edition_datastream_form_metadata_form_submit(array $form, array &$form_state) {
  $object = islandora_object_load($form_state['pid']);
  $dtoc = $object['DTOC'];
  $dtoc_data = _cwrc_dtoc_edition_xml_content_to_array($dtoc->content);
  if (!empty($dtoc_data['corpusConfiguration']['trombone']['CorpusMetadata'])) {
    $voyant_metadata = $dtoc_data['corpusConfiguration']['trombone']['CorpusMetadata'];
    $title = $voyant_metadata['title'];
    $sub_title = $voyant_metadata['subTitle'];
    $mods = $object['MODS'];
    $mods_data = _cwrc_dtoc_edition_xml_content_to_array($mods->content);
    $mods_sub_title = !empty($mods_data['titleInfo']['subTitle']) ? $mods_data['titleInfo']['subTitle'] : '';
    $mods_title = !empty($mods_data['titleInfo']['title']) ? $mods_data['titleInfo']['title'] : '';
    if ($mods_title !== $title || $mods_sub_title !== $sub_title) {
      // Regenerate the voyant corpus since the title or the sub title changed.
      // Getting the collections.
      $collections = _cwrc_dtoc_edition_get_collections_from_dtoc_xml_array($dtoc_data);
      // Getting corpus configurations.
      $corpus_configurations = _cwrc_dtoc_edition_get_corpus_configurations_from_dtoc_xml_array($dtoc_data);

      // Set the batch operations.
      _cwrc_dtoc_edition_set_batch_operations($object->id, $collections, $corpus_configurations);

      drupal_set_message(t('The corpus title and sub title was successfully updated.'));
    }
  }
}

/**
 * Helper functions.
 */

/**
 * Gets child options for a collection object.
 *
 * @param \FedoraObject $object
 *   The object.
 *
 * @return array
 *   The options.
 */
function _cwrc_dtoc_edition_get_collection_pid_options(\FedoraObject $object) {
  module_load_include('inc', 'islandora_plotit', 'includes/voyant_helpers');
  module_load_include('inc', 'islandora_cwrc_writer', 'includes/utilities');

  $ri_result = NULL;
  islandora_cwrc_voyant_get_members_via_ri($object, $ri_result);

  $options = array();
  if ($ri_result && count($ri_result) > 0) {
    $pids = array_map(function ($ri_result) {
      return $ri_result['object']['value'];
    }, $ri_result);

    foreach ($pids as $pid) {
      $collection_child = islandora_object_load($pid);
      $is_cwrc_doc = _cwrc_dtoc_edition_collection_child_has_cwrc_document_cmodel($collection_child);
      $has_supported_schema = $is_cwrc_doc ? _cwrc_dtoc_edition_collection_child_document_has_supported_schema($collection_child) : FALSE;
      if ($is_cwrc_doc && $has_supported_schema) {
        $options[$pid] = $collection_child->label;
      }
    }
  }
  return $options;
}

/**
 * Checks if a given object has CWRC document CModel.
 *
 * @param \FedoraObject $object
 *   The object.
 *
 * @return bool
 *   The check.
 */
function _cwrc_dtoc_edition_collection_child_has_cwrc_document_cmodel(\FedoraObject $object) {
  if (!$object) {
    return FALSE;
  }
  $models = !empty($object->models) ? $object->models : array();
  return in_array('cwrc:documentCModel', $models, TRUE);
}

/**
 * Checks whether a supplied object has a supported schema.
 *
 * @param \FedoraObject $object
 *   The object.
 *
 * @return bool
 *   TRUE the supported schema available , FALSE otherwise.
 */
function _cwrc_dtoc_edition_collection_child_document_has_supported_schema(\FedoraObject $object) {
  if (!$object) {
    return FALSE;
  }

  $supported_mappings = array('tei', 'orlando');
  module_load_include('inc', 'islandora_cwrc_writer', 'includes/utilities');
  $schema = islandora_cwrc_writer_get_document_schema_object($object);
  $schema_mapping = $schema ? islandora_cwrc_writer_get_schema_mapping($schema) : '';

  return in_array($schema_mapping, $supported_mappings, TRUE);
}

/**
 * Gets the collection selected sources files.
 *
 * @param string $collection_pid
 *   The collection pid.
 * @param array $selected_documents
 *   The selected documents.
 *
 * @return array
 *   The documents files.
 */
function _cwrc_dtoc_edition_reveal_form_get_collection_selected_documents_files($collection_pid, array $selected_documents) {
  module_load_include('inc', 'islandora_cwrc_writer', 'includes/utilities');
  $filters = array(
    ' ' => '_',
    '-' => '_',
    '/' => '_',
    '[' => '_',
    ']' => '_',
    ':' => '_',
  );
  $id = strtolower($collection_pid);
  $id = drupal_clean_css_identifier($id, $filters);
  $random_string = substr(md5(rand()), 0, 7);
  $collection_files = array();
  foreach ($selected_documents as $object_id => $object_name) {
    if (($object = islandora_object_load($object_id)) && isset($object['CWRC'])) {
      $datastream = $object['CWRC'];
      $schema = islandora_cwrc_writer_get_document_schema_object($object);
      $schema_mapping_id = $schema ? islandora_cwrc_writer_get_schema_mapping($schema) : '';
      $schema_mapping = drupal_clean_css_identifier(strtolower($schema_mapping_id), $filters);
      $datastream_id = drupal_clean_css_identifier(strtolower($datastream->id), $filters);
      $sub_folder = $datastream_id . '_' . $schema_mapping;
      $path = 'public://cwrc_dtoc_edition/' . $sub_folder . '/';
      $path .= $id . '/' . drupal_clean_css_identifier(strtolower($object_id), $filters) . '_' . $random_string;

      $local_uri = file_stream_wrapper_uri_normalize($path . '.xml');
      $dirname = drupal_dirname($local_uri);
      file_prepare_directory($dirname, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
      file_unmanaged_save_data($datastream->content, $local_uri);

      $collection_files[$object_id] = array(
        'uri' => $local_uri,
        'url' => file_create_url($local_uri),
        'schema_id' => $schema_mapping_id,
        'created_timestamp' => $datastream->createdDate->getTimestamp(),
      );
    }
  }

  return $collection_files;
}

/**
 * Sets batch operations to create or regenerate the DToC voyant corpus.
 *
 * @param string $object_id
 *   The object id.
 * @param array $collections
 *   The collections.
 * @param array $corpus_configurations
 *   The corpus configurations.
 */
function _cwrc_dtoc_edition_set_batch_operations($object_id, array $collections, array $corpus_configurations) {
  // Initializing the batch.
  $batch = array(
    'title' => t('Creating DTOC Edition...'),
    'operations' => array(),
    'init_message' => t('Starting ...'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('An error occurred during the creation of the DToC Edition!'),
    'progressive' => FALSE,
  );

  // Preparing collections document files.
  foreach ($collections as $collection_values) {
    $batch['operations'][] = array(
      'cwrc_dtoc_edition_reveal_form_batch_prepare_collection_items_datastream_files',
      array($collection_values),
    );
  }

  // Preparing source xml data for collections selected items.
  $xml_data = array(
    'name' => 'dtocEdition',
    1 => array('name' => 'sources'),
    2 => array('name' => 'corpusConfiguration'),
  );
  $batch['operations'][] = array(
    'cwrc_dtoc_edition_reveal_form_batch_prepare_collections_source_xml_data',
    array($xml_data, $collections),
  );

  // Extract user corpus configurations.
  $batch['operations'][] = array(
    'cwrc_dtoc_edition_reveal_form_batch_get_user_corpus_configurations',
    array($corpus_configurations),
  );

  // Getting corpus metadata.
  $batch['operations'][] = array(
    'cwrc_dtoc_edition_reveal_form_batch_get_corpus_metadata',
    array($object_id),
  );

  // Deleting generated datastream files after getting the corpus metadata.
  foreach ($collections as $collection_values) {
    $batch['operations'][] = array(
      'cwrc_dtoc_edition_reveal_form_batch_delete_datastream_files',
      array($collection_values),
    );
  }

  // Preparing source xml data for corpus metadata and configurations.
  $batch['operations'][] = array('cwrc_dtoc_edition_reveal_form_batch_prepare_corpus_configuration_xml_data', array());
  $batch['operations'][] = array('cwrc_dtoc_edition_reveal_form_batch_generate_datastream_content', array($object_id));
  batch_set($batch);
}

/**
 * Helper function to add all the ctools needed includes.
 */
function _cwrc_dtoc_edition_reveal_form_add_ctools_includes($width = 500, $height = 255) {
  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');

  // Add CTools' javascript to the page.
  ctools_modal_add_js();

  // Add our own style.
  $ctools_style = _cwrc_dtoc_edition_reveal_form_get_ctools_form_js_style($width, $height);
  drupal_add_js($ctools_style, 'setting');
}

/**
 * Gets custom ctools js style.
 *
 * @return array
 *   Of custom styles.
 *
 * @throws \Exception
 */
function _cwrc_dtoc_edition_reveal_form_get_ctools_form_js_style($width = 500, $height = 300) {
  // Create our own javascript that will be used to theme a modal.
  return array(
    'ctools-cwrc-dtoc-edition-style' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => $width,
        'height' => $height,
        'addWidth' => 20,
        'addHeight' => 15,
      ),
      'modalOptions' => array(
        'opacity' => .5,
        'background-color' => '#000',
      ),
      'animation' => 'fadeIn',
      'modalTheme' => 'CToolsCWRCDtocEditionModal',
      'throbber' => theme('image', array(
        'path' => ctools_image_path('ajax-loader.gif', 'cwrc_dtoc_edition'),
        'alt' => t('Loading...'),
        'title' => t('Loading'),
      )),
    ),
  );
}

/**
 * Transforms the xml content to string.
 *
 * @param string $content
 *   The xml content.
 *
 * @return array
 *   The xml content as array.
 */
function _cwrc_dtoc_edition_xml_content_to_array($content) {
  $xml_arr = (array) simplexml_load_string($content);
  return drupal_json_decode(drupal_json_encode($xml_arr));
}

/**
 * Prepares datastream content array to an array which can be used to generate a
 * valid DToC datastream.
 *
 * @param array $xml_data
 *   The datastream array content.
 *
 * @return array
 *   Which can be used to generate a dtoc edition datastream.
 */
function _cwrc_dtoc_edition_prepare_datastream_content_array_for_xml_generation(array $xml_data) {
  $xml_corpus_id_key = 1;
  $xml_corpus_configure_key = 2;
  $xml_xpaths_key = 3;
  $xml_trombone_key = 4;
  $data = array(
    'name' => 'dtocEdition',
    1 => array('name' => 'sources'),
    2 => array('name' => 'corpusConfiguration'),
  );

  // Preparing sources.
  $collection_counter = 1;
  $collections = empty($xml_data['sources']['collection']['@attributes']) && count($xml_data['sources']['collection']) > 1 ? $xml_data['sources']['collection'] : $xml_data['sources'];
  foreach ($collections as $collection) {
    $data[1][$collection_counter] = array(
      'name' => 'collection',
      'attributes' => $collection['@attributes'],
    );
    $document_counter = 1;
    $documents = !empty($collection['document']) ? $collection['document'] : array();
    foreach ($documents as $document) {
      $data[1][$collection_counter][$document_counter] = array(
        'name' => 'document',
        'attributes' => $document['@attributes'],
      );
      $document_counter++;
    }
    $collection_counter++;
  }

  // Setting up the corpus id.
  $data[2][$xml_corpus_id_key] = array(
    'name' => 'id',
    'value' => $xml_data['corpusConfiguration']['id'],
  );

  // Trombone.
  $trombone = !empty($xml_data['corpusConfiguration']['trombone']) ? $xml_data['corpusConfiguration']['trombone'] : array();
  if ($trombone) {
    $data[2][$xml_trombone_key] = array(
      'name' => 'trombone',
      'attributes' => $trombone['@attributes'],
    );
    // Adding corpus metadata from trombone.
    $xml_data_counter = 1;
    $corpus_metadata = $trombone['CorpusMetadata'];
    $data[2][$xml_trombone_key][1] = array(
      'name' => 'CorpusMetadata',
    );
    foreach ($corpus_metadata as $metadata_label => $metadata_value) {
      if (is_string($metadata_value) || is_numeric($metadata_value)) {
        $data[2][$xml_trombone_key][1][$xml_data_counter] = array(
          'name' => $metadata_label,
          'value' => $metadata_value,
        );
        $xml_data_counter++;
      }
      elseif ($metadata_label === 'languageCodes' && is_array($metadata_value)) {
        // Dealing with language codes which is an array.
        $data[2][$xml_trombone_key][1][$xml_data_counter] = array(
          'name' => $metadata_label,
        );
        foreach ($metadata_value as $language_code) {
          $data[2][$xml_trombone_key][1][$xml_data_counter][] = array(
            'name' => 'language',
            'value' => $language_code,
          );
        }
        $xml_data_counter++;
      }
    }
  }

  // User settings.
  $user_settings = $xml_data['corpusConfiguration']['userSettings'];
  $data[2][$xml_corpus_configure_key] = array(
    'name' => 'userSettings',
    'attributes' => $user_settings['@attributes'],
  );
  if (!empty($user_settings['curation'])) {
    $data[2][$xml_corpus_configure_key][1] = array(
      'name' => 'curation',
      'attributes' => $user_settings['curation']['@attributes'],
    );
  }

  // Adding custom xml configuration provided.
  $xml_data_counter = 1;
  $data[2][$xml_xpaths_key] = array('name' => 'xmlXpathExpressions');
  $xml_xpaths = !empty($xml_data['corpusConfiguration']['xmlXpathExpressions']) ? $xml_data['corpusConfiguration']['xmlXpathExpressions'] : array();
  foreach ($xml_xpaths as $xml_xpath_label => $xml_xpath) {
    $data[2][$xml_xpaths_key][$xml_data_counter] = array(
      'name' => $xml_xpath_label,
      'value' => $xml_xpath,
    );
    $xml_data_counter++;
  }

  ksort($data[2]);
  return $data;
}

/**
 * Gets collections from an existing DToC xml array.
 *
 * @param array $data
 *   The data.
 *
 * @return array
 *   The collections.
 */
function _cwrc_dtoc_edition_get_collections_from_dtoc_xml_array(array $data) {
  $saved_collections = empty($data['sources']['collection']['@attributes']) && count($data['sources']['collection']) > 1 ? $data['sources']['collection'] : $data['sources'];
  $collections = array();
  foreach ($saved_collections as $collection) {
    $collection_pid = $collection['@attributes']['pid'];
    $collections[$collection_pid] = array(
      'pid' => $collection_pid,
      'label' => $collection['@attributes']['label'],
      'selected_files' => array(),
    );
    if (!empty($collection['document']['@attributes']['pid'])) {
      // This means only one document/object was selected for this collection.
      $document_pid = $collection['document']['@attributes']['pid'];
      $collections[$collection_pid]['selected_files'][$document_pid] = $collection['document']['@attributes']['label'];
    }
    else {
      $documents = !empty($collection['document']) ? $collection['document'] : array();
      foreach ($documents as $document) {
        $document_pid = $document['@attributes']['pid'];
        $collections[$collection_pid]['selected_files'][$document_pid] = $document['@attributes']['label'];
      }
    }
  }

  return $collections;
}

/**
 * Gets the corpus configuration from an existing DToC xml array.
 *
 * @param array $data
 *   The data.
 *
 * @return array
 *   The corpus configurations.
 */
function _cwrc_dtoc_edition_get_corpus_configurations_from_dtoc_xml_array(array $data) {
  $corpus_configurations = array();
  $user_settings = $data['corpusConfiguration']['userSettings'];
  $is_custom_xpaths = $user_settings['@attributes']['type'] === 'custom';
  if ($is_custom_xpaths) {
    $corpus_configurations['custom']['optin'] = $is_custom_xpaths;
    // Adding custom xpaths.
    $corpus_configurations['custom']['options']['xpaths'] = array();
    if (!empty($data['corpusConfiguration']['xmlXpathExpressions'])) {
      foreach ($data['corpusConfiguration']['xmlXpathExpressions'] as $xpath_key => $xpath_expression) {
        $xpath_key_form = strtolower(substr($xpath_key, 0, -5));
        $corpus_configurations['custom']['options']['xpaths'][$xpath_key_form] = $xpath_expression;
      }
    }
    // Curation information. @todo find a way to incorporate custom part.
    $corpus_configurations['custom']['options']['curation'] = $user_settings['curation']['@attributes'];
  }
  else {
    $is_from_cwrc_dtoc_edition = $user_settings['@attributes']['type'] === 'copy_cwrc_edition';
    $corpus_configurations['copy_cwrc_edition']['optin'] = $is_from_cwrc_dtoc_edition;
    $is_from_voyant_dtoc_edition = $user_settings['@attributes']['type'] === 'copy_dtoc_edition';
    $corpus_configurations['copy_dtoc_edition']['optin'] = $is_from_voyant_dtoc_edition;
    $value = !empty($user_settings['@attributes']['value']) ? $user_settings['@attributes']['value'] : '';
    $corpus_configurations['copy_cwrc_edition']['search'] = $value;
    $corpus_configurations['copy_dtoc_edition']['search'] = $value;
  }
  return $corpus_configurations;
}
